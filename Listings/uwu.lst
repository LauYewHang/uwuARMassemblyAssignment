


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             uwuCode, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 00000004 
                       uwuWord EQU              4           ; define shortcut f
                                                            or 4 bytess uwu
    5 00000000 00000004 
                       uwuLeft EQU              4           ; offset for left n
                                                            ode
    6 00000000 00000008 
                       uwuRight
                               EQU              8           ; offset for right 
                                                            node
    7 00000000 0000000C 
                       uwuTraversed
                               EQU              12          ; offset for traver
                                                            sed value
    8 00000000 00000010 
                       uwuBlocked
                               EQU              16          ; offset for blocki
                                                            ng (the value has b
                                                            een used)
    9 00000000 00000014 
                       uwuNextNode
                               EQU              20          ; offset for next n
                                                            ode
   10 00000000 0000000F 
                       uwuListSize
                               EQU              15          ; the size of unsor
                                                            ted list
   11 00000000         
   12 00000000         ; general register
   13 00000000        9 
                       uwuConstQueue
                               RN               R9          ; register for stor
                                                            ing queue address
   14 00000000        A 
                       uwuCurrentIndex
                               RN               R10         ; R10 to keep track
                                                             of the current ele
                                                            ment
   15 00000000         ; using RN associate a register with a name
   16 00000000         
   17 00000000         ; for sorting binary tree
   18 00000000        0 
                       uwuListR
                               RN               R0          ; register for stor
                                                            ing the address of 
                                                            current list value
   19 00000000        1 
                       uwuTreeR
                               RN               R1          ; register for stor
                                                            ing the address of 
                                                            variable of current
                                                             tree node
   20 00000000        2 
                       uwuListValR
                               RN               R2          ; register for stor
                                                            ing the value of cu



ARM Macro Assembler    Page 2 


                                                            rrent list address
   21 00000000        3 
                       uwuTreeValR
                               RN               R3          ; register for stor
                                                            ing the value of cu
                                                            rrent tree node
   22 00000000        B 
                       uwuCurrentTree
                               RN               R11         ; register that kee
                                                            p track of currentT
                                                            reeAddress
   23 00000000         
   24 00000000         ; for uwu BFS
   25 00000000        0 
                       uwuSmallest
                               RN               R0          ; register for stor
                                                            ing the current sma
                                                            llest value
   26 00000000        1 
                       uwuTakeAny
                               RN               R1          ; determine if BFS 
                                                            should take the nex
                                                            t value as smallest
                                                             (foundation)
   27 00000000        B 
                       uwuCurrentNode
                               RN               R11         ; determine the cur
                                                            rent address of nod
                                                            e in queue (that ne
                                                            eds to be traverse)
                                                            
   28 00000000        C 
                       uwuCurrentHold
                               RN               R12         ; register to hold 
                                                            current value from 
                                                            node / random thing
                                                            s that need to be h
                                                            old
   29 00000000         
   30 00000000         
   31 00000000         ; place root to tree uwu
   32 00000000         uwuPlaceTreeRoot
   33 00000000 E59F0144        LDR              uwuListR, =uwuUnsortedList ; R0
                                                             is now address of 
                                                            list
   34 00000004 E59F1144        LDR              uwuTreeR, =uwuTree ; R1 is now 
                                                            address of tree
   35 00000008 E1A0B001        MOV              uwuCurrentTree, uwuTreeR ; R9 i
                                                            s now constantly po
                                                            inting to the addre
                                                            ss of tree
   36 0000000C E5902000        LDR              uwuListValR, [uwuListR] ; R2 is
                                                             now value of 1st e
                                                            lement of list
   37 00000010 E5812000        STR              uwuListValR, [uwuTreeR] ; store
                                                             the 1st element of
                                                             list to tree
   38 00000014 E5913000        LDR              uwuTreeValR, [uwuTreeR] ; load 
                                                            the root value of t



ARM Macro Assembler    Page 3 


                                                            o R3
   39 00000018 E28AA001        ADD              uwuCurrentIndex, uwuCurrentInde
x, #1 
                                                            ; increment to inde
                                                            x count
   40 0000001C         
   41 0000001C         ; sort the tree uwu
   42 0000001C         uwuSortTree
   43 0000001C E35A000F        CMP              uwuCurrentIndex, #uwuListSize ;
                                                             compare to see if 
                                                            all the values insi
                                                            de unsorted list ha
                                                            s been placed to uw
                                                            uTree
   44 00000020 AA000013        BGE              uwuBFSsortInitialize ; jump to 
                                                            BFS sort if all the
                                                             values have been a
                                                            dded
   45 00000024         
   46 00000024         ; get the value of new element in list
   47 00000024 E2800004        ADD              uwuListR, uwuListR, #uwuWord ; 
                                                            shift the address o
                                                            f R1 (original poin
                                                            ting to uwuTree) to
                                                             make it point to n
                                                            ext value in list
   48 00000028 E5902000        LDR              uwuListValR, [uwuListR] ; get t
                                                            he value of n-th el
                                                            ement in unsorted l
                                                            ist
   49 0000002C         
   50 0000002C         ; search which *left or *right the node should be placed
                        to uwu
   51 0000002C         uwuSearchChild
   52 0000002C E5913000        LDR              uwuTreeValR, [uwuTreeR]
   53 00000030 E1520003        CMP              uwuListValR, uwuTreeValR ; comp
                                                            are the value in cu
                                                            rrent node in tree 
                                                            (starting from root
                                                            ) to the value of n
                                                            -th element in list
                                                            
   54 00000034 E2811004        ADD              uwuTreeR, uwuTreeR, #uwuWord ; 
                                                            shift 4 bytes to ad
                                                            dress of uwuTree (m
                                                            akes it point to *l
                                                            eft of current node
                                                            )
   55 00000038 C2811004        ADDGT            uwuTreeR, uwuTreeR, #uwuWord ; 
                                                            shift 4 bytes to th
                                                            e address of uwuTre
                                                            e if current value 
                                                            in list is greater 
                                                            than value in node 
                                                            (makes it point to 
                                                            *right)
   56 0000003C         
   57 0000003C         ; create a new node and store it as the child if the chi
                       ld is null



ARM Macro Assembler    Page 4 


   58 0000003C E1A0500A        MOV              R5, uwuCurrentIndex
   59 00000040 E3A06014        MOV              R6, #uwuNextNode
   60 00000044 E0070695        MUL              R7, R5, R6  ; the offset of new
                                                             node
   61 00000048 E087700B        ADD              R7, R7, uwuCurrentTree
   62 0000004C E5872000        STR              uwuListValR, [R7] ; store the v
                                                            alue into the new n
                                                            ode
   63 00000050         
   64 00000050 E5914000        LDR              R4, [uwuTreeR] ; load the value
                                                             of *left or *right
                                                             to R4
   65 00000054 E3540000        CMP              R4, #0      ; check if the chil
                                                            d is null (indicate
                                                             can add a new chil
                                                            d)
   66 00000058 0A000001        BEQ              uwuCanStore ; jump to uwuCanSto
                                                            re for making the n
                                                            ode a child, if the
                                                             current *left or *
                                                            right is empty
   67 0000005C E1A01004        MOV              uwuTreeR, R4 ; else, if it is n
                                                            ot empty (the point
                                                            er already has a no
                                                            de), make uwuTreeR 
                                                            (the node) to be th
                                                            e child node
   68 00000060 EAFFFFF1        B                uwuSearchChild ; continue loopi
                                                            ng until finding an
                                                             empty edge
   69 00000064         
   70 00000064         uwuCanStore
   71 00000064 E5817000        STR              R7, [uwuTreeR] ; store the addr
                                                            ess of node to *lef
                                                            t or *right and thu
                                                            s making it a child
                                                            
   72 00000068 E59F10E0        LDR              uwuTreeR, =uwuTree ; reset the 
                                                            root to original ad
                                                            dress after sucessf
                                                            ully storing
   73 0000006C E28AA001        ADD              uwuCurrentIndex, uwuCurrentInde
x, #1 
                                                            ; increment the ind
                                                            ex count
   74 00000070 EAFFFFE9        B                uwuSortTree ; loop again for th
                                                            e next value in lis
                                                            t
   75 00000074         
   76 00000074         ; BFS start here uwu
   77 00000074         uwuBFSsortInitialize
   78 00000074 E3A01001        MOV              uwuTakeAny, #1 ; at the start o
                                                            f traversing, it sh
                                                            ould been able to t
                                                            ake on any value as
                                                             the smallest
   79 00000078 E3A0A001        MOV              uwuCurrentIndex, #1 ; set value
                                                             of current index t
                                                            o 1 (since we alrea



ARM Macro Assembler    Page 5 


                                                            dy have root as fir
                                                            st element) (for qu
                                                            eue, as in which in
                                                            dex to add the next
                                                             node)
   80 0000007C E3A0B000        MOV              uwuCurrentTree, #0 ; reset valu
                                                            e of current index 
                                                            (for tree, as in wh
                                                            ich tree BFS is acc
                                                            essing from queue)
   81 00000080 E59F90CC        LDR              uwuConstQueue, =uwuQueue
   82 00000084 E59FC0C4        LDR              uwuCurrentHold, =uwuTree ; curr
                                                            ently hold the addr
                                                            ess of first node o
                                                            f tree
   83 00000088 E589C000        STR              uwuCurrentHold, [uwuConstQueue]
 
                                                            ; store the first n
                                                            ode to queue
   84 0000008C         uwuBFSsort
   85 0000008C E1A0300B        MOV              R3, uwuCurrentTree ; store the 
                                                            index of current tr
                                                            ee node to R3
   86 00000090 E3A04004        MOV              R4, #uwuWord ; R4 = #4
   87 00000094 E0050493        MUL              R5, R3, R4  ; the offset of cur
                                                            rent index (to dete
                                                            rmine which element
                                                             in queue to access
                                                            )
   88 00000098 E0855009        ADD              R5, R5, uwuConstQueue ; the add
                                                            ress of current ele
                                                            ment that BFS shoul
                                                            d be accessing
   89 0000009C         
   90 0000009C E1A03005        MOV              R3, R5      ; copy the address 
                                                            of current element 
                                                            (in queue)
   91 000000A0 E5933000        LDR              R3, [R3]    ; replace R3 to the
                                                             address of the nod
                                                            e in tree to access
                                                            
   92 000000A4 E593C000        LDR              uwuCurrentHold, [R3] ; get the 
                                                            value of the tree
   93 000000A8 E3510001        CMP              uwuTakeAny, #1 ; see if any val
                                                            ue can be considere
                                                            d as the smallest
   94 000000AC 01A0000C        MOVEQ            uwuSmallest, uwuCurrentHold ; i
                                                            f uwuTakeAny == 1, 
                                                            then assign the uwu
                                                            CurrentHold as smal
                                                            lest
   95 000000B0 03A01000        MOVEQ            uwuTakeAny, #0 ; set uwuTakeAny
                                                             to 0 (no longer ta
                                                            ke any value)
   96 000000B4 1A000011        BNE              uwuCompare
   97 000000B8         uwuAfterCompare
   98 000000B8 EB000004        BL               uwuCheck    ; check for *left
   99 000000BC EB000003        BL               uwuCheck    ; check for *right
  100 000000C0 E35A000F        CMP              uwuCurrentIndex, #uwuListSize



ARM Macro Assembler    Page 6 


  101 000000C4 E28BB001        ADD              uwuCurrentTree, uwuCurrentTree,
 #1
  102 000000C8 BAFFFFEF        BLT              uwuBFSsort
  103 000000CC AA00000E        BGE              uwuStop
  104 000000D0         
  105 000000D0         uwuCheck
  106 000000D0 E2833004        ADD              R3, #uwuWord ; first time to ge
                                                            t *left, second tim
                                                            e to get *right
  107 000000D4 E5934000        LDR              R4, [R3]    ; get *left / *righ
                                                            t
  108 000000D8 E3540000        CMP              R4, #0      ; check if its chil
                                                            d is null
  109 000000DC 1A000000        BNE              uwuAddNodeAddress
  110 000000E0         uwuCheckBack
  111 000000E0 E12FFF1E        BX               LR
  112 000000E4         
  113 000000E4         uwuAddNodeAddress
  114 000000E4 E1A05009        MOV              R5, uwuConstQueue
  115 000000E8 E3A06004        MOV              R6, #uwuWord
  116 000000EC E0070A96        MUL              R7, R6, uwuCurrentIndex
  117 000000F0         
  118 000000F0 E0855007        ADD              R5, R5, R7
  119 000000F4 E5854000        STR              R4, [R5]
  120 000000F8 E28AA001        ADD              uwuCurrentIndex, uwuCurrentInde
x, #1 
                                                            ; after we add a no
                                                            de to the queue, we
                                                             increment by 1
  121 000000FC EAFFFFF7        B                uwuCheckBack
  122 00000100         
  123 00000100         uwuCompare
  124 00000100 E15C0000        CMP              uwuCurrentHold, uwuSmallest
  125 00000104 B1A0000C        MOVLT            uwuSmallest, uwuCurrentHold
  126 00000108 EAFFFFEA        B                uwuAfterCompare
  127 0000010C         
  128 0000010C         uwuResetTraverse
  129 0000010C         
  130 0000010C EAFFFFFE 
                       uwuStop B                uwuStop
  131 00000110         
  132 00000110 0000000A 
              00000005 
              0000001E 
              0000004E 
              00000002 
              00000013 
              0000000B 
              00000017 
              00000030 
              0000004F 
              00000001 
              0000000E 
              00000009 
              00000029 
              0000001F uwuUnsortedList
                               DCD              10, 5, 30, 78, 2, 19, 11, 23, 4
8, 79, 1, 14, 9, 41, 31 
                                                            ; original unsorted



ARM Macro Assembler    Page 7 


                                                             array of values
  133 0000014C         
  134 0000014C 00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             uwuMemory, DATA, READWRITE
  135 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 8 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 uwuTree SPACE            300         ; for storing the t
                                                            ree
  136 0000012C         ; it is 300 bytes because we have 5 variable for each no
                       des
  137 0000012C         ; 1. value
  138 0000012C         ; 2. *left
  139 0000012C         ; 3. *right
  140 0000012C         ; 4. traversed
  141 0000012C         ; 5. blocked (the value has been used)
  142 0000012C         
  143 0000012C 00 00 00 
              00 00 00 



ARM Macro Assembler    Page 9 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 uwuQueue
                               SPACE            60          ; for storing queue
                                                             when traversing th
                                                            rough the graph
  144 00000168         
  145 00000168 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 uwuSortedArray
                               SPACE            60          ; for storing the s
                                                            orted array
  146 000001A4         
  147 000001A4                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\uwu.d -o.\objects\uwu.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS
\Include -IC:\Keil_v5\ARM\INC\Sharp --predefine="__EVAL SETA 1" --predefine="__
UVISION_VERSION SETA 529" --list=.\listings\uwu.lst uwu.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

uwuAddNodeAddress 000000E4

Symbol: uwuAddNodeAddress
   Definitions
      At line 113 in file uwu.s
   Uses
      At line 109 in file uwu.s
Comment: uwuAddNodeAddress used once
uwuAfterCompare 000000B8

Symbol: uwuAfterCompare
   Definitions
      At line 97 in file uwu.s
   Uses
      At line 126 in file uwu.s
Comment: uwuAfterCompare used once
uwuBFSsort 0000008C

Symbol: uwuBFSsort
   Definitions
      At line 84 in file uwu.s
   Uses
      At line 102 in file uwu.s
Comment: uwuBFSsort used once
uwuBFSsortInitialize 00000074

Symbol: uwuBFSsortInitialize
   Definitions
      At line 77 in file uwu.s
   Uses
      At line 44 in file uwu.s
Comment: uwuBFSsortInitialize used once
uwuCanStore 00000064

Symbol: uwuCanStore
   Definitions
      At line 70 in file uwu.s
   Uses
      At line 66 in file uwu.s
Comment: uwuCanStore used once
uwuCheck 000000D0

Symbol: uwuCheck
   Definitions
      At line 105 in file uwu.s
   Uses
      At line 98 in file uwu.s
      At line 99 in file uwu.s

uwuCheckBack 000000E0

Symbol: uwuCheckBack
   Definitions
      At line 110 in file uwu.s
   Uses
      At line 121 in file uwu.s
Comment: uwuCheckBack used once
uwuCode 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: uwuCode
   Definitions
      At line 1 in file uwu.s
   Uses
      None
Comment: uwuCode unused
uwuCompare 00000100

Symbol: uwuCompare
   Definitions
      At line 123 in file uwu.s
   Uses
      At line 96 in file uwu.s
Comment: uwuCompare used once
uwuPlaceTreeRoot 00000000

Symbol: uwuPlaceTreeRoot
   Definitions
      At line 32 in file uwu.s
   Uses
      None
Comment: uwuPlaceTreeRoot unused
uwuResetTraverse 0000010C

Symbol: uwuResetTraverse
   Definitions
      At line 128 in file uwu.s
   Uses
      None
Comment: uwuResetTraverse unused
uwuSearchChild 0000002C

Symbol: uwuSearchChild
   Definitions
      At line 51 in file uwu.s
   Uses
      At line 68 in file uwu.s
Comment: uwuSearchChild used once
uwuSortTree 0000001C

Symbol: uwuSortTree
   Definitions
      At line 42 in file uwu.s
   Uses
      At line 74 in file uwu.s
Comment: uwuSortTree used once
uwuStop 0000010C

Symbol: uwuStop
   Definitions
      At line 130 in file uwu.s
   Uses
      At line 103 in file uwu.s
      At line 130 in file uwu.s

uwuUnsortedList 00000110

Symbol: uwuUnsortedList
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 132 in file uwu.s
   Uses
      At line 33 in file uwu.s
Comment: uwuUnsortedList used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

uwuMemory 00000000

Symbol: uwuMemory
   Definitions
      At line 134 in file uwu.s
   Uses
      None
Comment: uwuMemory unused
uwuQueue 0000012C

Symbol: uwuQueue
   Definitions
      At line 143 in file uwu.s
   Uses
      At line 81 in file uwu.s
Comment: uwuQueue used once
uwuSortedArray 00000168

Symbol: uwuSortedArray
   Definitions
      At line 145 in file uwu.s
   Uses
      None
Comment: uwuSortedArray unused
uwuTree 00000000

Symbol: uwuTree
   Definitions
      At line 135 in file uwu.s
   Uses
      At line 34 in file uwu.s
      At line 72 in file uwu.s
      At line 82 in file uwu.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

uwuBlocked 00000010

Symbol: uwuBlocked
   Definitions
      At line 8 in file uwu.s
   Uses
      None
Comment: uwuBlocked unused
uwuLeft 00000004

Symbol: uwuLeft
   Definitions
      At line 5 in file uwu.s
   Uses
      None
Comment: uwuLeft unused
uwuListSize 0000000F

Symbol: uwuListSize
   Definitions
      At line 10 in file uwu.s
   Uses
      At line 43 in file uwu.s
      At line 100 in file uwu.s

uwuNextNode 00000014

Symbol: uwuNextNode
   Definitions
      At line 9 in file uwu.s
   Uses
      At line 59 in file uwu.s
Comment: uwuNextNode used once
uwuRight 00000008

Symbol: uwuRight
   Definitions
      At line 6 in file uwu.s
   Uses
      None
Comment: uwuRight unused
uwuTraversed 0000000C

Symbol: uwuTraversed
   Definitions
      At line 7 in file uwu.s
   Uses
      None
Comment: uwuTraversed unused
uwuWord 00000004

Symbol: uwuWord
   Definitions
      At line 4 in file uwu.s
   Uses
      At line 47 in file uwu.s
      At line 54 in file uwu.s
      At line 55 in file uwu.s
      At line 86 in file uwu.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 106 in file uwu.s
      At line 115 in file uwu.s

7 symbols
371 symbols in table
